20180712 sql php 復習ノート

insert テーブルに書き込む

read  書き込まれた情報を呼び出す

update データを上書きする

delete 書き込まれた情報を削除する


create table テーブル名 (一列目名 データ型　, 二列目名 データ型);

例文

create table addresslist

(

user_id int(11),
name varchar(255),
mail varchar(255),
tell varchar(255),
preference varchar(255)

);

insert into テーブル名 (一列名,二列名,三列名,四列名)
values ("a","b","c","d");

例文

insert into addresslist　(user_id, name, mail, preference)
value ("1","山田太郎","abcd123@yahoo.co.jp","03-0000-0000","東京");

select * from テーブル名;  指定したテーブルのデータをすべて抽出する

select カラム名 from テーブル名; 指定したテーブルの指定したカラムだけを抽出する

複数のvalueを入れる場合

例文

INSERT into test_table (user_id,user_name,password)

values ("1","taro","123"),

("2","jiro","456"),

("3","hanako","789");




例文

select * from  addresslist;

select name from addresslist;

select カラム名 from テーブル名 where カラム名="検索したいワード";

例文

select mail from addresslist where prefecture = "千葉";
sellect name from addresslist where user_id="3";

*　=　の代わりにさまざまな演算子が使える

= 等しい
> 大きい
< 小さい
>=大きい、もしくは等しい
<=小さい、もしくは等しい

!=　><　等しくない

AND 二つの条件を結合し、両方の条件がtrue
OR  二つの条件の内、どちらかがtrue
NOT 式の結果を反転
BETWEEN a AND b 対象のフィールドがaとbの範囲内にする
LIKE 対象のフィールドがパターンに一致

例文 where以降は指定条件

select name from addresslist where user_id > 2;
select name from addresslist where name !="山田太郎";
select name from addresslist where user_id = 1 AND prefecture ="埼玉";
select name from addresslist where user_id = 1 OR user_id =3;
select mail from addresslist where user_id between 1 and 4;
select name from addresslist where mail like "%yahoo%";

nameカラムの中から2より大きい値をuser_idから抽出
nameカラムの中から山田太郎以外の値をnameから抽出
nameカラムの中からuser_idが1でかつ、prefectureが埼玉になるもののみを抽出(and検索)
nameカラムの中から1か3の値のuser_idを抽出(or検索)
mailカラムの中から1から4の値になっているものを抽出
nameカラムの中からyahooの文字が入っているものを抽出(部分一致検索)

update テーブル名 set 指定するカラム名 = "更新したい値"

例文

update addreslist set prefecture = "埼玉"
where user_id = 1;

delete from テーブル名　テーブルを削除したい時
delete from テーブル名 where カラム名 = 値の名前; 指定したデータのみを削除したい時

例文

delete from addresslist where user_id =3;

addresslist内のuser_idが3のデータを削除する

select カラム名 from テーブル名 order by カラム名(数字を扱っているべき)asc;   小さい順に並べる
select カラム名 from テーブル名 order by カラム名(数字を扱っているべき)desc;　大きい順に並べる

例文

select * from fruit_stock order by number asc;
select * from fruit_stock order by number desc;
select * from fruit_stock where number >=25 order by price desc;

fruit_stockからnumberのデータをすべて抽出し、それらを小さい順に並べる
fruit_stockからnumberのデータをすべて抽出し、それらを大きい順に並べる
fruit_stockから値が25以上のものをすべて抽出し、それらをpriceの値が大きい順に並べる

select count (カラム名。もしくは*) from テーブル名; 件数を取得する

例文

select count(fruit) from fruit_stock;
select count(fruit) from fruit_stock where price>=200 and madein="日本";

fruit_stockのfruitのデータ件数を取得する
priceの値が200以上かつ、madeinの値が日本であるfruit_stockのfruitのデータ件数を所得する

select sum (カラム名) from テーブル名; 

例文

select sum (number) from fruit_stock;

fruit_stockのnumberの値の合計値を所得する

select max (カラム名) from テーブル名;
select min (カラム名) from テーブル名;

例文

select max (price) from fruit_stock;
select min (price) from fruit_stock;

fruit_stockのpriceの値で一番大きい値を所得する
fruit_stockのpriceの値で一番小さい値を所得する

select avg (カラム名) from テーブル名;

例文

select avg (price) from fruit_stock;

fruit_stockのpriceの平均値を所得する

もしtestdbというデータベースがすでにある場合は削除しますという意味
drop database if exists testdb;
create database testdb;
use testdb;


javqでsql文を書いたときは、随時保存をして情報を更新すること

*******************************************************************************************************************************

■データベースについて


□データベースとは？

データベースとは、さまざまなデータを管理する仕組みのことである

データベースの主な機能は

登録 create 検索 read 更新　update 削除 delete になり、これらの基本機能のことをかしら文字をとって、CRUDと呼ばれている

□データベースの種類

・関係型データベース　表形式

・ドキュメント型データベース　キーと値で管理されたもの

□データベースの構造

テーブルという表の中にレコードと呼ばれる一軒一軒のデータがあり、その中に存在するデータがある場所をフィールドと呼ぶ

■コマンドプロンプトにおけるmysql

mysql -u root -p ログインコマンド

-uはユーザー指定をしており、rootは最高権限を持つユーザーとしてログインすることを示し、-pはパスワードを書くためのもの

exit quit でログアウト

show databases; データベース一覧を表示する

show tables; テーブル一覧を表示する(useでデータベースの指定が必要)

create databases xxxxx;　データベースを作成する

create table xxxxx(yyy,zzz); テーブルを作成する(useでデータベースの指定が必要)

drop databases xxxxx; データベースを削除する

drop table xxxxx; テーブルを削除する(useでデータベースの指定が必要)

use xxxxx; 使用するデータベースを選ぶ

descrive xxxxx;(テーブル名) (descでも良い)(useでデータベースを指定する必要がある)　

insert into xxxxx;(テーブル名)(yyyyy,zzzzz)
values(aaaaa,bbbbb); 指定したテーブルのフィールドに値を書き込む

insert into xxxxx;
values(aaaaa,bbbbb); 指定したテーブルのフィールドに値を書き込む(省略型)

update xxxxx set yyyyy = 100 where zzzzz =1; 値が1のデータを100に更新する

delete from xxxxx where yyyyy < 60; 値が60以下のデータを削除する

delete from xxxxx; 指定したテーブルの値を全て削除する(dropと違い、テーブルは残ります)

◆条件を指定する

◇条件指定

・select*from xxxxx; 指定したテーブルのデータの指定をする
・select レコード名 from xxxxx; テーブルのレコードを指定する


指定したテーブル内から指定された条件に当てはまるデータを指定する(条件指定)
・select*from xxxxx where yyyyy;(条件)

・select*from xxxxx where yyyyy = 50;        　　　　　　yyyyyが50のデータ(一致検索)
・select*from xxxxx where yyyyy >= 50;       　　　　　　yyyyyが50以上のデータ
・select*from xxxxx where yyyyy between 50 and 100; 　　 60以上かつ100以下のデータ 60<=x<=100

・select*from xxxxx where yyyyy != 'red';    　　　　　　yyyyyがredでないデータ
・select*from xxxxx where yyyyy in ('red','green'); 　　 red、またはgreenで一致したデータ

・select*from xxxxx where yyyyy like 'T%';   　　　　　　yyyyyの最初がTのデータ
・select*from xxxxx where yyyyy like '%T';   　　　　　　yyyyyの最後がTのデータ
・select*from xxxxx where yyyyy like '%T_';  　　　　　　yyyyyにTが含まれたデータ

・select*from xxxxx where yyyyy >=80 and xxxxx ='blue';  yyyyyが80以上でxxxxxがblueのデータ
・select*from xxxxx where yyyyy >=80 or xxxxx ='blue'; 　yyyyyが80以上、またはxxxxxがblueのデータ

◇並び替え

・select*from xxxxx order by yyyyy; 　　　　　　　　　　 指定したレコードの値を基準に昇順に並べる(小さいものから並べる)
・select*from xxxxx order by yyyyy desc; 　　　　　　　　指定したレコードの値を基準に降順に並べる(大きいものから並べる)
・select*from xxxxx limit 5; 　　　　　　　　　　　　　　データを上から5件取得する
・select*from xxxxx limit 3,8; 　　　　　　　　　　　　　三番目からデータを８件取得する。(開始位置と、取得数と捕らえるといい)

※データ数は0から始まるので、3を提示すると、データでいう4番目から取得が始まるので気をつけること

◇集計

select count(*) from xxxxx; データの件数を表示する
select max(yyyyy) from xxxxx; 指定したカラムの最高値を表示する
select min(yyyyy) from xxxxx; 指定したカラムの最低値を表示する
select sum(yyyyy) from xxxxx; 指定したカラムの合計値を表示する
select avg(yyyyy) from xxxxx; 指定したカラムの平均を表示する
select zzzzz, avg(yyyyy) from xxxxx; チームごとの平均を表示する
select yyyyy,length(yyyyy) from xxxxx; 指定したカラムの文字列数を表示する
select concat (name,'(,team,)')from lesson; 指定したカラムの文字列を連結する

 
■キー

□キーとは？

フィールドにおける情報の設定をしているものであり、テーブルを作成する際に設定することでさまざまな制限などをかけることができる

□様々なキー

not null で空っぽの表記を許さないフィールドにする

unique 同じ値を書けないフィールドにする。

primary key 同じ値を書けないフィールドにする、また、空っぽの表記を許さないフィールドにする

□使い方

例文

create table test(

gakunen int not null,
kumi varchar(10) not null,
name varchar(20),
primary key(gakunen,kumi)←このように複数のキーだけを指定できるが、あまりオススメされてない方法なのでしないほうがいい

);




※SQL文での最後のセミコロンは、デリミタといい、区切りを意味する記号と呼ばれる



****************************************************************************************************************************************************


SQL文はかなりエラーを引き起こす

特に文体の崩れ、プログラムの隣接などが多い(体験談)



selectは読み込みという意味で捉えるとい良い

.execute()　sql文を実行するメソッド
UPDATE item_info_transaction SET item_name ='うまいぼう', item_price ='10', item_stock ='400' WHERE item_name = '33'  AND item_price = '120' AND item_stock = '60';
