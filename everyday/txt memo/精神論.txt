20180727 復習チェックリスト

HTML基礎

1時間目(Webサイトの基本)	

2時間目(拡張子の表示とBracketsのインストール)	

3時間目(HTMLの基本)	

4時間目(URLとドメインとフォルダ)	

5時間目(リンクの挿入)	

6時間目(画像の挿入)	

7時間目(テーブル)	

8時間目(フォーム)	

9時間目(リスト(箇条書き))	

CSS基礎

1時間目(CSSとは)	

2時間目(CSSの基本1)	

3時間目(CSSの基本2)	

4時間目(CSSの基本3)	

5時間目(ボックス要素)	

6時間目(position)	

7時間目(float)	

8時間目(レイアウト)	

9時間目(ブロック要素とインライン要素)	

10時間目(メニューの作り方、ブロック要素や画像の並べ方)
	
11時間目(中央寄せ(margin 0 auto と text-align:center))	

12時間目(footerのデザイン)
	
JavaScript基礎

1時間目(JavaScriptの基礎)	

2時間目((文字列の出力・アラートをあげる)	

3時間目(データ型(数値・文字列・論理値))	

4時間目(変数)	

5時間目(四則演算・剰余)	

6時間目(加算子・減算子)	

7時間目(if文 基礎)	

8時間目(if文 応用)	

9時間目(switch文)	

10時間目(for文 基礎)	

11時間目(for文 応用)	

12時間目(while文)	

13時間目(配列 基礎)	

14時間目(配列 応用)	

15時間目(関数)	

jQuery基礎

1時間目(jQueryの基本)	

2時間目(jQueryの書き方)	

3時間目(様々なイベント)	

4時間目(hoverイベント)	

5時間目(thisについて)	

6時間目(スライドショー)	

XAMPP&MySQL基礎

1時間目(データベースの基本とXAMPPのインストール)	

2時間目(データベースの作成方法)	

3時間目(CRUD(create文、insert文))	

4時間目(CRUD(select文、update文、delete文))	

5時間目(ソート(並べ替え))	

6時間目(データの集計)	

PHP基礎

1時間目(PHPの基本と出力)	

2時間目(変数と代入・四則演算)	

3時間目(剰余と加算子・減算子)	

4時間目(if文 基礎)	

5時間目(if文 応用)	

6時間目(switch文)	

7時間目(配列基礎)	

8時間目((連想配列 多次元配列)	

9時間目(テキストと数の操作)	

10時間目(関数)	

11時間目(for文(ループ処理)基礎)	

12時間目(for文(ループ処理)応用)	

13時間目(while文)	

14時間目(foreach文の基礎)	

15時間目(foreach文の応用)	

Java基礎

1時間目(Eclipseのダウンロード)	

2時間目(Javaの基礎)	

3時間目(Javaで文字等を表示する)	

4時間目(変数と代入)	

5時間目(四則演算・剰余)	

6時間目(加算子・減算子)	

7時間目(if文(判定基礎))	

8時間目(if文(判定応用))	

9時間目(switch文)	

10時間目(配列基礎)	

11時間目(配列 多次元配列)	

12時間目(for文(ループ処理)基礎)	

13時間目(for文(ループ処理)応用)	

14時間目(while文 基礎)	

15時間目(while文 応用)	

*********************************************************************************************************************************************************************************

■java勉強サイト

https://qiita.com/euc_/items/1c1ef42d62cdcbd23421
https://qiita.com/kotauchisunsun/items/cc83fcecdb85a667f529

**************************************************************************************************************************************************************************

■精神論リスト

□プログラミング学習のコツは実際に成果物を作ってみること

その後も日々新しい知識を身につける必要があるため、勉強の毎日ですがSEは私には向いていたようです。
これからプログラミングを勉強する方は、漠然と知識を身につけるよりも
まず何かゲームなどの機能を作ることから始めた方が覚えるスピードが速いかもしれません。
あとは、何よりも新しいことに対する興味が大事かもしれません。

http://programming-study.com/case/java-se/

□データが大量に収集される時代、その分析や可視化が重要だと考えた

私はゲームを作りたいと抽象的な考えでプログラミングをやるのではなく、
明確な目的を決めてプログラミングをやり始めることが大事だと考えています。
自分が作りたいものを最初に考える事で、自ずと必要な言語が見えてくるのです。

□デザインは既成のものを使い、スピーディに

サーバー側でJava言語を勉強し、可視かできるソースが出来上がると、次の目的に移りました。
その可視化した詳細を誰でも見れるようにネットワーク上に表示させるまでの過程を
実現しなければなりませんでした。そこで、必要となってくるのは、HTMLやCSS、Javascript等です。
私は、CSSなどのデザインに時間をかけるのは効率的ではないと考えました。
もちろん、1からレイアウトを書いて勉強する事も大事ですが、多くの人は時間がありません。
なので、Bootstrapなどのフリーのレイアウトを使っていく事をお勧めします。
BootstrapはTwitterなどのボタンやアイコンの素材を無料に使用する事ができ、
そういった細かいデザインはフリーソフトを使用するのが効率的です。

http://programming-study.com/case/definite/

□実際にプログラムを書き、挑戦と失敗を繰り返すことが大事

それからはエクリプスという無料のソフトウェアをインストールし、
自宅のパソコンでもプログラミングをできる環境を整えました。
そしてまずは『やさしいＪＡＶＡ』に載っているサンプルプログラムの構造を理解した後
そのままベタ打ちし、動かすというように徐々にプログラミングに慣れていきました。
慣れたら自分でサンプルを少し弄って違うプログラムにしたり、
応用して自分でプログラムを作るようになりました。

そこからはトライ＆エラーの繰り返しです。

最初はどこが間違っているのかを見つけること自体が難しかったのですが、
自分で作ったプログラムを追うことで新たな発見があり、
エラーも自力で解決できるようになっていきました。
プログラム初心者にとって一番大事なのは

「より多くのプログラムを書き、トライ＆エラーを繰り返す」ことだと思います。

最初は私のようにサンプルプログラムのベタ打ちでも構いません。
しかしそれがどういうプログラムか理解することは忘れないでください。
プログラミングの世界でエラーが出ることなど日常茶飯事です。
そこで挫けずに踏ん張ることで、プログラムへの理解は深まっていきます。

http://programming-study.com/case/training/

□欲張らず、はじめは簡単な書籍から

プログラミングを初めて学ぶ人は、できるだけ簡単な書籍を使って勉強することをおすすめします。
薄い本のほうが簡単そうに見えるかもしれませんが、
むしろ厚い本のほうが当たり前のことでもきちんと解説してくれていて理解しやすいのでおすすめです。
それと、プログラミングの学習と並行して、

タイピングの速度と正確さを鍛えるのが大切です。

数字や記号なども正確に打てるようになると、プログラムを書くのを楽しめるようになってきます。

http://programming-study.com/case/student/

□わからないことをわかるようにする

http://programming-study.com/case/programming-people/

□トレーニング理論
プログラム初心者に「プログラム上達の秘訣は？」と聞かれたら、僕はこう答えます。

１:たくさんプログラムを読む
２:たくさんプログラムを改造する
３:たくさんプログラムを楽しむ

プログラムというと、どうしても「書く」「作る」という行為を連想するかもしれませんが、
 初心者がまず身につけなければならないのは、

サンプルプログラムを読んで理解する、読解力です。 
そして、理解したサンプルを、自分の意図した処理へと改造することこそ、
プログラムを書く能力を高める一番の方法です。

この「読む」「改造する」という行為は、実際の開発現場においても、頻繁に行われる手法です。
なのに、プログラム学習においては、あまり重視されてきませんでした。
『愛のJava256本ノック』は、Java初心者のために、 
プログラムを読み、改造し、楽しむための機会を提供すべく考え出した、これまでとは一風変わったJavaの学習スタイルです。

このサイトを通して、楽しみながら、しっかりとプログラムと向き合ってほしいと思います。

http://www.groovy-number.com/java/

□ああ、なんだか自己嫌悪におちいりそうです。
こうなったらもう、落とし前を付ける しかないですね。過去の自分に。
今度こそ、きっちり作り込まれた架空世界を構築してやる！！
納得のいくまで。 それをやって初めて、前に進めるんじゃないかって気がします。
そう考えると、達成できなかった夢も、今の自分にとっては大切な財産です。 
だって、僕にしか踏み出せない一歩があるってことですから。


□設計が上達するために超えるべきステップが3つあります．

小さく作る
作るものを明確にする
変更を予測する

これらを体験することで，設計とは
プログラムの管理にすぎないということを感じていただきたいです．

https://qiita.com/kotauchisunsun/items/cc83fcecdb85a667f529

□具体的思考と抽象的思考について

https://shigotonomirai.com/whats-abstraction-reification

********************************************************************************************************************************************************************************


頑張ったら効果があった
プレイヤーしかできなかったことを敵でもできるようにして、それが動くととても充実感を得られた。
プレイヤーができていたことをやるだけでなく、敵がプレイヤーを見つけたら、他の敵に知らせたり、黒板システムを使ってチーム連携を高めたりと、超大変だったけど、思い返せば楽しいことをやっていたと思う。
敵がプレイヤーと同じ操作をできるようにしたことで、敵がこっそりレバーを動かしたり、敵がプレイヤーをカウンター攻撃したり、梯子を上ってきたりしたのは、楽しかった。



どうやったら作れるか常に、常に！常に！！考える

コードを見まくる

IT/Web業界でもマインドは同じだと思う
特に何かを明示的に書いているわけではないですが、ものを作るにあたっての考え方や姿勢っていうのは、どこも同じだと思っています。
残念ながらお金優先にしている企業も存在しますし、そのほうが給与がいいのも事実です。

しかし色んな分野に手を出して、自分で作る範囲、触る範囲を広げることは、将来的な仕事の幅を広げることになるので、やるべきだと思います。
若い内に苦労しろと言うのは、若い内は守るものが少ないし、失敗も許してもらえやすいし、体力があるからだと思います。

大手に長年勤務してて、樽しか作れないモデラーさんが会社に応募してきた話を聞いたこともあります。怖い話です。
樽のモデリングやUV貼り,場合によってはテクスチャ作成ぐらい私でもできます。

得意分野から広げていき、ビジネス領域に手を伸ばす
私自身の考えになります。
現職はオフショアと仕事することが多く、原価がとても安いです。
日本でエンジニアを抱えるより遥かに安いです。しかも、彼らの中には想像を絶する速さで成果物を作ってきます。
今のところ、設計・リスクの観点が弱いので、手直しも多いですが、この先はどうなっているかは分かりません。
気がついたら埋もれているという恐怖から抜け出すために、今できることを武器に少しずつ領域を広げて、
ゆくゆくはエンジニア領域だけでなく、企画の領域にも手を出したほうがいいと思います。
極端な話、効果的な収益モデルを考えられる人（会社にお金を流し込める人）が、会社では重宝されるからです。


